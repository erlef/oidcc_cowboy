on:
  workflow_call: {}

name: "Test"

env:
  ERL_AFLAGS: "-enable-feature all"

jobs:
  detectToolVersions:
    name: "Detect Tool Versions"

    runs-on: ubuntu-latest

    outputs:
      otpVersion: "${{ steps.toolVersions.outputs.OTP_VERSION }}"
      rebarVersion: "${{ steps.toolVersions.outputs.REBAR_VERSION }}"

    steps:
      - uses: actions/checkout@v4
      - name: "Read .tool-versions"
        id: toolVersions
        run: |
          OTP_VERSION="$(cat .tool-versions | grep erlang | cut -d' ' -f2-)"
          echo OTP: $OTP_VERSION
          echo "OTP_VERSION=${OTP_VERSION}" >> $GITHUB_OUTPUT

          REBAR_VERSION="$(cat .tool-versions | grep rebar | cut -d' ' -f2-)"
          echo Rebar: $REBAR_VERSION
          echo "REBAR_VERSION=${REBAR_VERSION}" >> $GITHUB_OUTPUT

  rebar_format:
    name: rebar3 fmt

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          version-file: .tool-versions
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: rebar_format-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            rebar_format-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - run: rebar3 fmt --check

  eunit:
    name: rebar3 eunit (${{ matrix.otp }})

    runs-on: ubuntu-latest

    needs: ["detectToolVersions"]

    strategy:
      fail-fast: false
      matrix:
        include:
          - otp: "26.0"
            unstable: false
          - otp: "26.2.5"
            unstable: false
          - otp: "27.0.1"
            unstable: false
          - otp: "master"
            unstable: true

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          otp-version: ${{ matrix.otp }}
          rebar3-version: "${{ needs.detectToolVersions.outputs.rebarVersion }}"
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: eunit-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            eunit-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - run: rebar3 eunit --cover --cover_export_name "eunit-${{ steps.setupBEAM.outputs.otp-version }}"
      - uses: actions/upload-artifact@v4
        if: "${{ matrix.otp == needs.detectToolVersions.outputs.otpVersion }}"
        with:
          name: eunit-coverage-${{ matrix.otp }}
          path: _build/test/cover/eunit-${{ steps.setupBEAM.outputs.otp-version }}.coverdata

  conformance:
    name: rebar3 ct (${{ matrix.otp }})

    runs-on: ubuntu-latest

    needs: ["detectToolVersions"]

    strategy:
      fail-fast: false
      matrix:
        include:
          - otp: "26.0"
            unstable: false
          - otp: "26.2.5"
            unstable: false
          - otp: "27.0.1"
            unstable: false
          - otp: "master"
            unstable: true

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          otp-version: ${{ matrix.otp }}
          rebar3-version: "${{ needs.detectToolVersions.outputs.rebarVersion }}"
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: ct-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            ct-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - run: rebar3 ct --cover --cover_export_name "ct-${{ steps.setupBEAM.outputs.otp-version }}"
      - uses: actions/upload-artifact@v4
        if: "${{ matrix.otp == needs.detectToolVersions.outputs.otpVersion }}"
        with:
          name: ct-coverage-${{ matrix.otp }}
          path: _build/test/cover/ct-${{ steps.setupBEAM.outputs.otp-version }}.coverdata

  coverage:
    name: rebar3 cover

    runs-on: ubuntu-latest

    needs: ["eunit", "conformance"]

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          version-file: .tool-versions
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: cover-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            cover-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Unpack Artifacts
        run: |
          mkdir -p _build/test/cover/
          mv artifacts/*/*.coverdata _build/test/cover/
          rm -rf artifacts
      - run: rebar3 cover
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: _build/test/cover/

  coveralls:
    name: rebar3 coveralls send

    runs-on: ubuntu-latest

    needs: ["eunit", "conformance"]

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          version-file: .tool-versions
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: cover-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            cover-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Unpack Artifacts
        run: |
          mkdir -p _build/test/cover/
          mv artifacts/*/*.coverdata _build/test/cover/
          rm -rf artifacts
      - run: rebar3 as test compile
      - run: rebar3 as test coveralls send
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: rebar3 lint

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          version-file: .tool-versions
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: lint-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            lint-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - run: rebar3 lint

  dialyzer:
    name: rebar3 dialyzer

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          version-file: .tool-versions
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: dialyzer-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            dialyzer-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - run: rebar3 dialyzer

  hank:
    name: rebar3 hank

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        id: setupBEAM
        with:
          version-file: .tool-versions
          version-type: strict
      - uses: actions/cache@v4
        with:
          path: _build
          key: hank-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-${{ hashFiles('rebar.config') }}
          restore-keys: |
            hank-${{ runner.os }}-${{ steps.setupBEAM.outputs.otp-version }}-
      - run: rebar3 hank
